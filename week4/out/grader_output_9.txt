See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 17 warnings)

Correctness:  44/49 tests passed
Memory:       22/22 tests passed
Timing:       119/125 tests passed

Aggregate score: 92.92%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 12K Mar 28 08:17 Board.java
5.6K Mar 28 08:17 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:81:26: The instance variable '_values' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:82:23: The instance variable '_hammingDistance' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:83:23: The instance variable '_manhattanDistance' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:86:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] Board.java:92:23: The instance variable '_manhattanDistances' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:93:22: The instance variable '_posToRow' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:94:22: The instance variable '_posToCol' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:95:19: The instance variable '_dim' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:97:9: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] Board.java:98:9: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] Board.java:240:27: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
[WARN] Board.java:295:7: The comment is empty. [EmptyComment]
[WARN] Board.java:297:7: The comment is empty. [EmptyComment]
[WARN] Board.java:339:7: The comment is empty. [EmptyComment]
[WARN] Board.java:341:7: The comment is empty. [EmptyComment]
[WARN] Solver.java:167:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 16 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:79:1: Defining a nested class in this program suggests poor design. [DescendantToken]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
    - student   hamming() = 16127
    - reference hamming() = 16126

    - failed on trial 1 of 10

==> FAILED

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
    - student   manhattan() = 363612
    - reference manhattan() = 1365431

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
    - toString() returns wrong value

    - failed on trial 1 of 10

==> FAILED

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
    - incorrect number of neighbors
    - student   neighbors = 3
    - reference neighbors = 4

    - failed on trial 1 of 10

==> FAILED

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
    - isGoal() returns wrong answer
    - student   isGoal() = false
    - reference isGoal() = true

==> FAILED

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 19/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2            64                  128
=> passed     3            72                  192
=> passed     4            72                  240
=> passed     8           120                  560
=> passed    12           200                 1008
=> passed    16           312                 1584
=> passed    20           456                 2288
=> passed    37          1432                 6856
=> passed    72          5240                23088
=> passed   120         14456                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 1.00 n^2 + 0.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
unsolveable
  * puzzle2x2-unsolvable2.txt
unsolveable
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
unsolveable
  * puzzle2x2-unsolvable2.txt
unsolveable
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
  * random 2-by-2 unsolvable boards
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4776
=> passed  puzzle15.txt      15     5784
=> passed  puzzle20.txt      20     3048
=> passed  puzzle25.txt      25     3768
=> passed  puzzle30.txt      30     4488
=> passed  puzzle35.txt      35     6072
==> 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      12464               18               17
=> passed  puzzle15.txt      15488               27               26
=> passed  puzzle20.txt     146768              406              405
=> passed  puzzle25.txt    1401456             3865             3864
=> passed  puzzle30.txt    5665136            15069            15068
=> passed  puzzle35.txt   35873280           104179           104178
==> 6/6 tests passed


Total: 12/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.10
=> passed  puzzle22.txt      22    3     0.01
=> passed  puzzle21.txt      21    3     0.01
=> passed  puzzle23.txt      23    3     0.01
=> passed  puzzle24.txt      24    3     0.00
=> passed  puzzle25.txt      25    3     0.02
=> passed  puzzle27.txt      27    3     0.01
=> passed  puzzle29.txt      29    3     0.03
=> passed  puzzle26.txt      26    3     0.01
=> passed  puzzle28.txt      28    3     0.02
=> passed  puzzle30.txt      30    3     0.04
=> passed  puzzle31.txt      31    3     0.06
=> passed  puzzle39.txt      39    4     0.13
=> passed  puzzle41.txt      41    5     0.03
=> passed  puzzle34.txt      34    4     0.34
=> passed  puzzle37.txt      37    4     0.13
=> passed  puzzle44.txt      44    5     0.07
=> passed  puzzle32.txt      32    4     0.61
=> passed  puzzle35.txt      35    4     0.13
=> passed  puzzle33.txt      33    4     0.44
=> passed  puzzle43.txt      43    4     0.64
=> passed  puzzle46.txt      46    4     0.33
=> passed  puzzle40.txt      40    4     0.42
=> passed  puzzle36.txt      36    4     0.91
=> passed  puzzle45.txt      45    4     0.42
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt        990              585
=> passed  puzzle22.txt       3387             2003
=> passed  puzzle21.txt       2275             1341
=> passed  puzzle23.txt       6768             4021
=> passed  puzzle24.txt       2444             1486
=> passed  puzzle25.txt       9504             5640
=> passed  puzzle27.txt       5392             3300
=> FAILED  puzzle29.txt      31096   (1.5x)   18711   (1.5x)
=> passed  puzzle26.txt       8507             5088
=> passed  puzzle28.txt      15484             9440
=> passed  puzzle30.txt      38433            23365
=> passed  puzzle31.txt      53056            32272
=> passed  puzzle39.txt     117556            57445
=> passed  puzzle41.txt      23840            10234
=> FAILED  puzzle34.txt     297357   (1.1x)  142032   (1.1x)
=> passed  puzzle37.txt     126168            60477
=> passed  puzzle44.txt     100174            44995
=> passed  puzzle32.txt     887747           423529
=> passed  puzzle35.txt     207362           103184
=> passed  puzzle33.txt     501163           238074
=> passed  puzzle43.txt     678932           332882
=> passed  puzzle46.txt     486426           242885
=> passed  puzzle40.txt     614335           301887
=> passed  puzzle36.txt    1289235           627995
=> passed  puzzle45.txt     640221           318292
==> 23/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt          990            0            0
=> passed  puzzle22.txt          3387            0            0
=> passed  puzzle21.txt          2275            0            0
=> passed  puzzle23.txt          6768            0            0
=> passed  puzzle24.txt          2444            0            0
=> passed  puzzle25.txt          9504            0            0
=> passed  puzzle27.txt          5392            0            0
=> passed  puzzle29.txt          31096            0            0
=> passed  puzzle26.txt          8507            0            0
=> passed  puzzle28.txt          15484            0            0
=> passed  puzzle30.txt          38433            0            0
=> passed  puzzle31.txt          53056            0            0
=> passed  puzzle39.txt          117556            0            0
=> passed  puzzle41.txt          23840            0            0
=> passed  puzzle34.txt          297357            0            0
=> passed  puzzle37.txt          126168            0            0
=> passed  puzzle44.txt          100174            0            0
=> passed  puzzle32.txt          887747            0            0
=> passed  puzzle35.txt          207362            0            0
=> passed  puzzle33.txt          501163            0            0
=> passed  puzzle43.txt          678932            0            0
=> passed  puzzle46.txt          486426            0            0
=> passed  puzzle40.txt          614335            0            0
=> passed  puzzle36.txt          1289235            0            0
=> passed  puzzle45.txt          640221            0            0
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1572                1562                1575
=> passed  puzzle22.txt       5387                5381                5390
=> passed  puzzle21.txt       3613                3605                3616
=> passed  puzzle23.txt      10786               10778               10789
=> passed  puzzle24.txt       3927                3917                3930
=> passed  puzzle25.txt      15141               15133               15144
=> passed  puzzle27.txt       8689                8681                8692
=> FAILED  puzzle29.txt      49804   (1.5x)      49796   (1.5x)      49807
=> passed  puzzle26.txt      13592               13586               13595
=> passed  puzzle28.txt      24921               24911               24924
=> passed  puzzle30.txt      61795               61789               61798
=> passed  puzzle31.txt      85325               85317               85328
=> passed  puzzle39.txt     174998              174990              175001
=> passed  puzzle41.txt      34071               34061               34074
=> FAILED  puzzle34.txt     439386   (1.1x)     439380   (1.1x)     439389
=> passed  puzzle37.txt     186642              186634              186645
=> passed  puzzle44.txt     145166              145156              145169
=> passed  puzzle32.txt    1311273             1311263             1311276
=> passed  puzzle35.txt     310543              310533              310546
=> passed  puzzle33.txt     739234              739226              739237
=> passed  puzzle43.txt    1011811             1011803             1011814
=> passed  puzzle46.txt     729308              729300              729311
=> passed  puzzle40.txt     916219              916213              916222
=> passed  puzzle36.txt    1917227             1917217             1917230
=> passed  puzzle45.txt     958510              958502              958513
==> 23/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1572                1562                1575
=> passed  puzzle22.txt       5387                5381                5390
=> passed  puzzle21.txt       3613                3605                3616
=> passed  puzzle23.txt      10786               10778               10789
=> passed  puzzle24.txt       3927                3917                3930
=> passed  puzzle25.txt      15141               15133               15144
=> passed  puzzle27.txt       8689                8681                8692
=> FAILED  puzzle29.txt      49804   (1.5x)      49796   (1.5x)      49807   (1.5x)
=> passed  puzzle26.txt      13592               13586               13595
=> passed  puzzle28.txt      24921               24911               24924
=> passed  puzzle30.txt      61795               61789               61798
=> passed  puzzle31.txt      85325               85317               85328
=> passed  puzzle39.txt     174998              174990              175001
=> passed  puzzle41.txt      34071               34061               34074
=> FAILED  puzzle34.txt     439386   (1.1x)     439380   (1.1x)     439389   (1.1x)
=> passed  puzzle37.txt     186642              186634              186645
=> passed  puzzle44.txt     145166              145156              145169
=> passed  puzzle32.txt    1311273             1311263             1311276
=> passed  puzzle35.txt     310543              310533              310546
=> passed  puzzle33.txt     739234              739226              739237
=> passed  puzzle43.txt    1011811             1011803             1011814
=> passed  puzzle46.txt     729308              729300              729311
=> passed  puzzle40.txt     916219              916213              916222
=> passed  puzzle36.txt    1917227             1917217             1917230
=> passed  puzzle45.txt     958510              958502              958513
==> 23/25 tests passed


Total: 119/125 tests passed!


================================================================