See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 13 warnings)

Correctness:  48/49 tests passed
Memory:       22/22 tests passed
Timing:       90/125 tests passed

Aggregate score: 93.18%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.8K Mar 27 01:18 Board.java
5.6K Mar 27 01:18 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'Board$Coord' be refactored into a static nested class?  At Board.java:[lines 96-111]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:90: The private instance (or static) variable '_hammingDistance' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:91: The private instance (or static) variable '_manhattanDistance' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:59: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Solver.java:59: The private instance (or static) variable 'manhattanComparator' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:83:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Board.java:83:27: The instance variable '_values' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:88:23: The instance variable '_size' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:90:17: The instance variable '_hammingDistance' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:91:17: The instance variable '_manhattanDistance' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:98:27: The instance variable '_row' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:98:33: The instance variable '_col' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:185:27: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
[WARN] Board.java:239:7: The comment is empty. [EmptyComment]
[WARN] Board.java:241:7: The comment is empty. [EmptyComment]
[WARN] Solver.java:157:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:78:1: Defining a nested class in this program suggests poor design. [DescendantToken]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:59:13: Can you make the variable of type 'Comparator' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
unsolveable
  * puzzle2x2-unsolvable2.txt
unsolveable
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
unsolveable
  * puzzle2x2-unsolvable2.txt
unsolveable
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
unsolveable
  * puzzle3x3-unsolvable2.txt
unsolveable
  * puzzle4x4-unsolvable.txt
unsolveable
  * random 2-by-2 unsolvable boards
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
unsolveable
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 24/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4720
=> passed  puzzle15.txt      15     5688
=> passed  puzzle20.txt      20     2912
=> passed  puzzle25.txt      25     3592
=> passed  puzzle30.txt      30     4272
=> passed  puzzle35.txt      35     5816
==> 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      28312               34               33
=> passed  puzzle15.txt      35248               52               51
=> passed  puzzle20.txt     228888              644              643
=> passed  puzzle25.txt    1591560             4565             4564
=> passed  puzzle30.txt    5028200            14106            14105
=> passed  puzzle35.txt   38918536           119544           119543
==> 6/6 tests passed


Total: 12/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.13
=> passed  puzzle22.txt      22    3     0.02
=> passed  puzzle21.txt      21    3     0.01
=> passed  puzzle23.txt      23    3     0.01
=> passed  puzzle24.txt      24    3     0.00
=> passed  puzzle25.txt      25    3     0.02
=> passed  puzzle27.txt      27    3     0.01
=> passed  puzzle29.txt      29    3     0.04
=> passed  puzzle26.txt      26    3     0.01
=> passed  puzzle28.txt      28    3     0.03
=> passed  puzzle30.txt      30    3     0.07
=> passed  puzzle31.txt      31    3     0.15
=> passed  puzzle39.txt      39    4     0.10
=> passed  puzzle41.txt      41    5     0.08
=> passed  puzzle34.txt      34    4     0.81
=> passed  puzzle37.txt      37    4     0.18
=> passed  puzzle44.txt      44    5     0.52
=> passed  puzzle32.txt      32    4     1.05
=> passed  puzzle35.txt      35    4     0.56
=> passed  puzzle33.txt      33    4     2.60
=> passed  puzzle43.txt      43    4     1.78
=> passed  puzzle46.txt      46    4     2.34
=> passed  puzzle40.txt      40    4     1.31
=> FAILED  puzzle36.txt      36    4     6.39 (>= 5.0 seconds)

Exceeded CPU limit of 5.0 seconds per puzzle. Aborting tests.

==> 23/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt       1600              957
=> passed  puzzle22.txt       3098             1833
=> passed  puzzle21.txt       2166             1279
=> passed  puzzle23.txt       6201             3677
=> passed  puzzle24.txt       2681             1631
=> passed  puzzle25.txt      11193             6629
=> passed  puzzle27.txt       6023             3679
=> FAILED  puzzle29.txt      21883   (1.1x)   13237   (1.1x)
=> passed  puzzle26.txt       6588             3973
=> passed  puzzle28.txt      15978             9709
=> passed  puzzle30.txt      35978            21873
=> passed  puzzle31.txt      63107            38431
=> passed  puzzle39.txt      42001            20623
=> passed  puzzle41.txt      28498            12201
=> passed  puzzle34.txt     264912           126539
=> passed  puzzle37.txt      67057            32041
=> passed  puzzle44.txt     156039            70259
=> passed  puzzle32.txt     402612           192513
=> passed  puzzle35.txt     236698           117155
=> passed  puzzle33.txt     892173           426345
=> passed  puzzle43.txt     675563           331661
=> passed  puzzle46.txt     789453           397035
=> passed  puzzle40.txt     380602           186019
=> passed  puzzle36.txt    2023129           982399
==> 23/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt          18926            0            0
=> passed  puzzle22.txt          40968            0            0
=> passed  puzzle21.txt          26228            0            0
=> passed  puzzle23.txt          93196            0            0
=> passed  puzzle24.txt          34668            0            0
=> passed  puzzle25.txt          180936            0            0
=> passed  puzzle27.txt          85608            0            0
=> passed  puzzle29.txt          397164            0            0
=> passed  puzzle26.txt          101348            0            0
=> passed  puzzle28.txt          280056            0            0
=> passed  puzzle30.txt          657960            0            0
=> passed  puzzle31.txt          1344766            0            0
=> passed  puzzle39.txt          749822            0            0
=> passed  puzzle41.txt          445380            0            0
=> passed  puzzle34.txt          5643630            0            0
=> passed  puzzle37.txt          1270526            0            0
=> passed  puzzle44.txt          3200530            0            0
=> passed  puzzle32.txt          8676400            0            0
=> passed  puzzle35.txt          5163126            0            0
=> passed  puzzle33.txt          20743984            0            0
=> passed  puzzle43.txt          16429676            0            0
=> passed  puzzle46.txt          20167818            0            0
=> passed  puzzle40.txt          8814138            0            0
=> passed  puzzle36.txt          52685406            0            0
==> 24/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2554                2544               32713
=> passed  puzzle22.txt       4928                4922               69753
=> passed  puzzle21.txt       3442                3434               45663
=> passed  puzzle23.txt       9875                9867              157563
=> passed  puzzle24.txt       4309                4299               60187
=> passed  puzzle25.txt      17819               17811              304087
=> passed  puzzle27.txt       9699                9691              154875
=> FAILED  puzzle29.txt      35117   (1.1x)      35109   (1.1x)     681625   (1.7x)
=> passed  puzzle26.txt      10558               10552              175413
=> passed  puzzle28.txt      25684               25674              485923
=> passed  puzzle30.txt      57848               57842             1173757
=> FAILED  puzzle31.txt     101535              101527             2258537   (1.3x)
=> passed  puzzle39.txt      62621               62613             1268513
=> passed  puzzle41.txt      40696               40686              740951
=> FAILED  puzzle34.txt     391448              391442             9128133   (1.5x)
=> passed  puzzle37.txt      99095               99087             2093799
=> passed  puzzle44.txt     226295              226285             5214551
=> passed  puzzle32.txt     595122              595112            14810197
=> passed  puzzle35.txt     353850              353840             8533545
=> FAILED  puzzle33.txt    1318515             1318507            34447233   (1.2x)
=> passed  puzzle43.txt    1007221             1007213            27547777
=> passed  puzzle46.txt    1186485             1186477            33053427
=> passed  puzzle40.txt     566618              566612            14377401
=> passed  puzzle36.txt    3005525             3005515            86485391
==> 20/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2554                2544               32713   (8.2x)
=> FAILED  puzzle22.txt       4928                4922               69753   (7.2x)
=> FAILED  puzzle21.txt       3442                3434               45663   (4.6x)
=> FAILED  puzzle23.txt       9875                9867              157563  (10.7x)
=> FAILED  puzzle24.txt       4309                4299               60187   (4.0x)
=> FAILED  puzzle25.txt      17819               17811              304087  (10.6x)
=> FAILED  puzzle27.txt       9699                9691              154875   (4.9x)
=> FAILED  puzzle29.txt      35117   (1.1x)      35109   (1.1x)     681625  (20.8x)
=> FAILED  puzzle26.txt      10558               10552              175413   (5.3x)
=> FAILED  puzzle28.txt      25684               25674              485923   (6.4x)
=> FAILED  puzzle30.txt      57848               57842             1173757   (9.7x)
=> FAILED  puzzle31.txt     101535              101527             2258537  (17.5x)
=> FAILED  puzzle39.txt      62621               62613             1268513   (6.8x)
=> FAILED  puzzle41.txt      40696               40686              740951   (2.5x)
=> FAILED  puzzle34.txt     391448              391442             9128133  (23.2x)
=> FAILED  puzzle37.txt      99095               99087             2093799   (4.8x)
=> FAILED  puzzle44.txt     226295              226285             5214551   (7.5x)
=> FAILED  puzzle32.txt     595122              595112            14810197  (11.0x)
=> FAILED  puzzle35.txt     353850              353840             8533545   (6.2x)
=> FAILED  puzzle33.txt    1318515             1318507            34447233  (21.4x)
=> FAILED  puzzle43.txt    1007221             1007213            27547777  (10.1x)
=> FAILED  puzzle46.txt    1186485             1186477            33053427  (12.2x)
=> FAILED  puzzle40.txt     566618              566612            14377401   (5.0x)
=> FAILED  puzzle36.txt    3005525             3005515            86485391  (16.0x)
==> 0/25 tests passed


Total: 90/125 tests passed!


================================================================
